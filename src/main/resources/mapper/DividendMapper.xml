<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.springboot.spring.mapper.DividendMapper">
<!-- 주식 배당 내역-->
<select id = "dividendList"  resultType="Map" parameterType="com.springboot.spring.dto.TransactionDto" >
                SELECT /* DividendMapper.dividendList */
                    STOCK_NAME,
                    to_char(TRNSCDATE, 'YYYY') AS TRNSCDATE,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '01' , AMOUNT, '0') ) AS january,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '02' , AMOUNT, '0') ) AS february,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '03' , AMOUNT, '0') ) AS march,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '04' , AMOUNT, '0') ) AS april,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '05' , AMOUNT, '0') ) AS may,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '06' , AMOUNT, '0') ) AS june,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '07' , AMOUNT, '0') ) AS july,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '08' , AMOUNT, '0') ) AS august,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '09' , AMOUNT, '0') ) AS september,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '10' , AMOUNT, '0') ) AS october,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '11' , AMOUNT, '0') ) AS november,
                    sum(DECODE(to_char(TRNSCDATE, 'MM'), '12' , AMOUNT, '0') ) AS december
                FROM
                    TRANSACTION
                where 1=1
                <if test='stockName != null and stockName != "" '>
                    and STOCK_NAME like  '%' || #{stockName} || '%'
                </if>
                <if test='trnscdate != null and trnscdate != "" '>
                    and to_char(TRNSCDATE, 'YYYY-MM') LIKE '%'|| #{trnscdate} || '%'
                </if>
                GROUP BY 
                    STOCK_NAME,
                    to_char(TRNSCDATE, 'YYYY')
                ORDER BY TRNSCDATE, STOCK_NAME
</select>

<!-- 주별 배당 내역-->
<select id = "byWeekDividendList"  resultType="Map" parameterType="Map" >
<!--
         
                    SELECT /* DividendMapper.byWeekDividendList */
                        ROWNUM AS NO,
                        to_char(TRNSCDATE, 'YYYY-MM-DD') AS TRNSCDATE,
                        STOCK_NAME,
                        AMOUNT,
                        RGSTDATE,
                        DIVIDEND
                    FROM TRANSACTION
                where 1=1
                <if test='(startYmd != null and startYmd != "" ) and (endYmd != null and endYmd != "" )'>
                    and TRNSCDATE BETWEEN #{startYmd} and #{endYmd}
                </if>
    -->   
            SELECT
                *
            FROM
                (
                SELECT
                    *
                FROM
                    (
                    SELECT
                        /* DividendMapper.byWeekDividendList */
                        ROW_NUMBER() OVER ( ORDER BY TRNSCDATE,       STOCK_NAME) AS NO_,
                        ROW_NUMBER() OVER ( ORDER BY TRNSCDATE,       STOCK_NAME) AS currentPage,
                        to_char(TRNSCDATE, 'YYYY-MM-DD') AS TRNSCDATE,
                        STOCK_NAME,
                        AMOUNT,
                        RGSTDATE,
                        DIVIDEND,
                        COUNT(*) OVER() AS totalPages,
                        SUM(AMOUNT) OVER() AS TOTAL
                    FROM
                        TRANSACTION
                    WHERE
                        1 = 1
                        <if test='(startYmd != null and startYmd != "" ) and (endYmd != null and endYmd != "" )'>
                        AND TRNSCDATE BETWEEN #{startYmd} AND #{endYmd}
                        </if>
                        )
                WHERE
                    NO_  <![CDATA[ <=  ]]>  (#{page} * #{rowCount})
                                    )
                WHERE (((#{page}-1) * #{rowCount}) + 1) <![CDATA[  <=	]]>   NO_

</select>

<insert id="transactionInsert" parameterType="com.springboot.spring.dto.TransactionDto" >
        INSERT  INTO transaction /* com.springboot.spring.mapper.DividendMapper.transactionInsert 배당 거래일자 등록*/
        (   NO,
            TRNSCDATE,
            STOCK_NAME,
            AMOUNT,
            DIVIDEND
        )
        VALUES(
            #{no},
            #{trnscdate},
            #{stockName},
            #{amount},
            #{dividend}
        )
</insert>

<select id="tNoString" parameterType="com.springboot.spring.dto.TransactionDto" resultType="String">
    select /* DividendMapper.tNoString */ TRANSACTION_SEQ.NEXTVAL from dual
</select>

<!-- 주식 배당 상세 내역-->
<select id = "dividendDtlsInqry"  resultType="com.springboot.spring.dto.TransactionDto" parameterType="com.springboot.spring.dto.TransactionDto" >
    SELECT  /* DividendMapper.dividendDtlsInqry */
            NO,
            A.STOCK_NAME,
            to_char(TRNSCDATE, 'YYYY-MM-DD') AS TRNSCDATE,
            AMOUNT,
            DIVIDEND
        FROM TRANSACTION A
            WHERE  A.STOCK_NAME = #{stockName}
                AND TRNSCDATE BETWEEN TO_DATE(#{trnscdate}, 'yyyy-MM-dd') AND 
                                      LAST_DAY(TO_DATE(#{trnscdate}, 'yyyy-MM-dd'))
</select>

<update id="transactionUpdate" parameterType="com.springboot.spring.dto.TransactionDto">
    UPDATE  /* DividendMapper.transactionUpdate */
        TRANSACTION
    set   STOCK_NAME =  #{stockName}
        , AMOUNT     =  #{amount}
        , TRNSCDATE  =  #{trnscdate}
        , DIVIDEND   =  #{dividend}
        , RGSTDATE   =  sysdate
    where no = #{no}
</update>

<delete id="transactionDelete" parameterType="String">
    DELETE  /* DividendMapper.transactionDelete */
     FROM TRANSACTION WHERE no = #{no}
</delete>

<select id = "yearComparison"  resultType="Map" parameterType="com.springboot.spring.dto.TransactionDto">

               SELECT /*SQL_ID :  DividendMapper.yearComparison*/
					DECODE(GROUPING(TO_CHAR(TRNSCDATE, 'YYYY')), 1, '합계', TO_CHAR(TRNSCDATE, 'YYYY')) AS TRNSCDATE,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '01' , AMOUNT, '0') ) AS JANUARY,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '02' , AMOUNT, '0') ) AS FEBRUARY,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '03' , AMOUNT, '0') ) AS MARCH,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '04' , AMOUNT, '0') ) AS APRIL,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '05' , AMOUNT, '0') ) AS MAY,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '06' , AMOUNT, '0') ) AS JUNE,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '07' , AMOUNT, '0') ) AS JULY,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '08' , AMOUNT, '0') ) AS AUGUST,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '09' , AMOUNT, '0') ) AS SEPTEMBER,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '10' , AMOUNT, '0') ) AS OCTOBER,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '11' , AMOUNT, '0') ) AS NOVEMBER,
                    SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '12' , AMOUNT, '0') ) AS DECEMBER,
                      SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '01' , AMOUNT, '0') )
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '02' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '03' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '04' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '05' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '06' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '07' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '08' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '09' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '10' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '11' , AMOUNT, '0') ) 
                    + SUM(DECODE(TO_CHAR(TRNSCDATE, 'MM'), '12' , AMOUNT, '0') ) 
                    AS ALL_SUM
                FROM
                    TRANSACTION
                WHERE 1=1
                GROUP BY ROLLUP(TO_CHAR(TRNSCDATE, 'YYYY'))

</select>

</mapper>